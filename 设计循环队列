class MyCircularQueue {
    private int front;//当前队首元素下标
    private int rear;//当前队尾元素下标
    private int size;
    private int[]array;

    /** Initialize your data structure here. Set the size of the queue to be k. */
    public MyCircularQueue(int k) {
        array=new int[k];
        rear=0;
        front=0;
        size=0;

    }

    /** Insert an element into the circular queue. Return true if the operation is successful. */
    public boolean enQueue(int value) {
        if(size==array.length)
            return false;//队满
        else{
            array[rear]=value;
            rear=(rear+1)%array.length;//更新当前队尾元素
            size++;
            return true;
        }
    }//插入元素

    /** Delete an element from the circular queue. Return true if the operation is successful. */
    public boolean deQueue() {
        if(size==0)
            return false;
        else{
            front=(front+1)%array.length;//更新队首元素
            size--;
            return true;
        }

    }//删除元素

    /** Get the front item from the queue. */
    public int Front() {
        if(size==0)
            return -1;
        return array[front];
    }//返回队首元素

    /** Get the last item from the queue. */
    public int Rear() {
        if(size==0)
            return -1;
        int index=(rear+array.length-1)%array.length;//rear总是指向当前队尾的下一个坐标，所以再算队尾元素是不可直接return
        return array[index];

    }//返回队尾元素

    /** Checks whether the circular queue is empty or not. */
    public boolean isEmpty() {
        return size==0;
    }//判空

    /** Checks whether the circular queue is full or not. */
    public boolean isFull() {
        return size==array.length;
    }//判满
}
