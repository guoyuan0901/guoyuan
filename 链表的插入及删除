class Node{
	int val;
	Node next;
	public Node(int val){
		this.val=val;
		this.next=null;
	}
}
public class MyLinkedList{
	public static void main(String[] args){
		Node head=null;
		int val=0;
		head=pushBack(head,0);
		head=pushBack(head,1);
		head=pushFront(head,2);
		print(head);//2 0 1
		head = pushBack(head, 10);
		head = pushBack(head, 20);
		print(head);	// 2 0 1 10 20 
		head = popBack(head);
		head = popBack(head);
		head = popBack(head);
		head = popBack(head);
		head = popBack(head);
		
		head = popBack(head);	// 报错
		print(head);		// 空
		
		head = pushBack(head, 100);
		print(head);		//100
		

	}
	public static Node pushFront(Node head,int val){
		Node node=new Node(val);
		node.next=head;
		return node;
	}//头插
	public static Node pushBack(Node head,int val){
		Node node=new Node(val);
		if(head==null)
			return node;//空链表时进行尾插会改变头结点
		else {
			Node last=head;
			while(last.next!=null){//找到最后一个结点
				last=last.next;
			}
			last.next=node;
			return head;
		}
	}//尾插

	public static void print(Node head){
		Node cur=head;
		while(cur!=null){
			System.out.println(cur.val);
			cur=cur.next;
		}
	}//遍历访问结点
	public static Node popFront(Node head){
		if(head==null){
			System.out.println("空链表无法删除");
			return head;
		}
		head=head.next;
		return head;
	}//头删
	public static Node popBack(Node head){
		if(head==null){
			System.out.println("空链表无法删除");
			return head;
		}
		if(head.next==null)
			return null;
	    else{
			Node lastsecond=head;
			while(lastsecond.next.next!=null){//找到倒数第二个结点
				lastsecond=lastsecond.next;
			}
			lastsecond.next=null;
			return head;
		}
	}//尾删

}

